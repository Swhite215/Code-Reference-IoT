MQTT: The Standard for IoT Messaging

1. What is MQTT?
    - MQTT is an OASIS stadnard messaging protocol for the Internet of Things. 
    - It is designed as an extremely lightweight publish/subscribe messaging transport that is ideal for connecting remote devices with a small code footprint and minimal network bandwidth.
    - MQTT today is used in a wide variety of industries such as automotive, telecommunications, oil and gas, etc
2. Why MQTT?
    - Lightweight and Efficient - MQTT clients are very small, require minimal resources so can be used on small microcontroller. MQTT message headers are small to optimize network bandwidth
    - Bi-Directional Communication - MQTT allows for messaging between device to cloud and cloud to device. This makes for easy broadcasting messages to groups of things
    - Scales to Millions of Things - MQTT can scale to connect with millions of IoT devices
    - Reliable Message Delivery - Reliability of message delivery is important for many IoT use cases. This is why MQTT has 3 defined quality of service levels
        - 0 - at most once
        - 1 - at least once
        - 2 - exactly once
    - Support for Unreliable Networks - Many IoT devices connet over unreliable cellular networks. MQTTs support for persistent sessions reduces the time to reconnect the client with the broker
    - Security Enabled - MQTT makes it easy to encrypt messages using TLS and authenticate clients using modern authentication protocols, such as OAuth
3. MQTT Publish/Subscribe Architecture
    - Publisher = MQTT Client
    - MQTT Broker
    - Subscriber = MQTT CLient

MQTT & MQTT 5 Essentials by HiveMQ
    1. Volume 1 - MQTT Essentials
        a. Chapter One - Introducing MQTT
            - History - MQTT was invented in 1999 by Andy Stanford Clark IBM and Arlen Nipper
            - Former Acronym - MQ Telemetry Transpor
            - Current - MQTT is NOT an Acronym
        b. Chapter Two - The Publish Subscribe Pattern
            - MQTT decouples Publisher and Subscriber
            - Publisher - client that sends a message
            - Subscriber - client(s) that receive a message
            - Broker - handles connection between Publisher and Subscriber
            - What is Publish/Subscribe Architecture?
                - Space Decoupling- Publisher and subscriber do not need to know each other
                    - MQTT Publishers and Subscribers just need to know the hostname/IP and port of the broker
                - Time Decoupling - Publisher and subscriber do not need to run at the same time
                - Synchonization Decoupling - Operations on both components do not need to be interrupted during publishing or receiving
             - Scalability - operations on broker can be highly parallelized and messages can be processed in an event driven way
             - Message Filtering by Broker
                - MQTT - Subject Based Filtering - filtering based on the subject or topic that is part of each message
                    - Topic - strings with a hierachical structure that allow filtering based on a limited number of expressions
                - Content Based Filtering - filtering based on a specific content filter language. 
                - Type Based Filtering - filtering based on type/class when using object oriented languages
            - Distinction between MQTT and Message Queues
                - Message Queue - incoming messages are stored in queue until picked up by client, MQTT can not process messages
                - Message Queue - message can be processed by one consumer only, MQTT every subscriber that subscribes to the topic gets the message
                - Message Queue - queues must be created explicitly, MQTT topics can be created on the fly
        c. Chapter Three - Client, Broker and Connection Establishment
            - Client - both publisher and subscriber, MQTT Client is any deivce that runs a MQTT library and connects to any MQTT Broker over a network
            - Broker - responsible for receiving all messages, filtering the messages, and determining who is subscribed to each message, and sending the message to these subscribed clients
                - Holds the sessions of all persisted clients, including subscriptions and missed messages
                - Authenticates and authorizes the clients
            - MQTT Connection - TCP/IP Stack
                - Initiate - client sends a CONNECT message to the broker. Broker responds with a CONNACK message and a status code
                - Disconnect - client sends a disconnet command or the connection break
            - MQTT connection through a NAT - No problem
            - CONNECT Message - Client Intiates Connection
                - MQTT Packet CONNECT
                    - clientID: client-1 - client identifier identifier eachs MQTT client
                    - cleanSession: true - flag tells the broker whether the client wants to establish a persistent session or not, false is persistent and broker stores all subscriptions for the client and all missed messages
                    - username: "Spencer" - used for client authenitaction and authorization
                    - password: "White" - used for client authenitaction and authorization
                    - lastWillTopic: "/spencer/will"
                    - lastWillQos: 2
                    - lastWillMessage: "unexpected exit" - message notifiers other clients when a client disconnect ungracefully
                    - lastWillRetain: false
                    - keepAlive: 60 - time interval in seconds that the client specifies and communicates to the broker when the connection is established, longest period of time broker and client can endure without sending a message
            - CONNACK Message - Broker Response
                - MQTT Packet CONNACK
                    - sessionPresent: true - tells the client whether the broker already has a persistent session available from previous interactions with the client
                        - clearSession: false - Option 1 - if session information is available for the client ID and the broker has stored session information, the session present flag is true
                        - clearSession: false - Option 2 - if broker does not have any session information for the clientg ID, the session present flag is false
                    - returnCode: 0 - connect acknowledge flag that tells the client whether the connection attempt was unsuccessful
                        - 0 - connection accepted
                        - 1 - connection refused, unacceptable protocol version
                        - 2 - connection refused, identifier rejected
                        - 3 - connection refused, server unavailable
                        - 4 - connection refused, bad username or password
                        - 5 - connection refused, not authorized
            - DISCONNECT Message
                - MQTT Packet DISCONNECT
        d. Chapter Four - MQTT Publish, Subscribe, and Unsubscribe
            - MQTT Publish - a MQTT client can publish messages as soons as it connects to a broker, each message must contain a topic that the broker can use to forward the message to interested clients, typically eahc message has a payload that contains the data to transmit in byte format
                - MQTT Packet PUBLISH
                    - packetId: 4314
                    - topicName: "topic/1" - simple string that is hierachically structured with forward slashes as delimeters
                    - qos: 1 - indicates the quality of service level of the message
                    - retainFlag: false - defines whether the message is saved by the broker as the last known good value for a topic
                    - payload: "temperature:32.5" - actual content of the message in binary
                    - dupFlag: false = indicates that the message is a duplicate and was resent because the intended recipient did not acknowledege the original message
            - Publish Process
                - Publish Message
                - Broker Reads Messsage and acknowledegers the message according to QoS level
                - Message is Processed
                    - Determine which clients have subscribed to the topic
                    - Send the subscribed clients the message
                - IMPORTANT - the publishing client does not get any feedback about whether anyone is interested in the published message or how many clients receieved the message from the broker
            - MQTT Subscribe - a MQTT client sends a SUBSCRIBE message to the broker with topic of interest
                - MQTT Packet SUBSCRIBE
                    - packet identifier - unqiuely identifiers a message as it flows between the client and broker
                    - subscription list - a SUBSCRIBE message can contain multiple subscriptions for a client, each subscription is made up of a topic and a QoS level, can subscribe to topic pattern with wildcards
            - MQTT SUBACK - to confirm each subscription, the broker sednds a SUBACK acknowledgement message to the client
                - MQTT Packet SUBACK
                    - packetId: 4313 - unique identifier used to identify a message
                    - returnCode 1: 2 - one return code for each topic/QoS pair that it receives in the SUBSCRIBE message
                    - returnCode 2: 1
                        - 0 - Success - Maximum QoS 0
                        - 1 - Success - Maximum QoS 1
                        - 2 - Success - Maximum QoS 2
                        - 128 - Failure
            - MQTT Unsubscribe - deletes existing subscription of a client on the broker
                - MQTT Packet UNSUBSCRIBE
                    - packetId: 4313
                    - topic1: "topic/1"
                    - topic2: "topic/2"
            - MQTT UNSUBACK - broker confirms unsubscription
                - MQTT Packet UNSUBACK
                    - packetId: 4316
        e. Chapter Five - Topics & Best Practices
            - Topics - refers to a UTF-8 string that the broker uses to filter messages for each connected client, consists of one or more topic levels
                - Example - myhome/groundfloor/livingroom/temperature
            - Wildcards - client can subscribe to exact topic or to multiple topics simulataneously
                - Single Level: + - replaces one topic level e.g. myhome/groundfloor/+/temperature is all ground floor rooms that report temperature
                - Multi Level: # -  covers many topic levels e.g. myhome/groundfloor/# - is all ground floor rooms that report either temperature, brightness, etc.
                - Beginning with $ - reserved for internal statistic of the MQTT broker, clients cannot publish messages to these topics
            - Best Practices
                - Never use a leading forward slash
                - Never use spaces in a topic
                - Keep the topic short and concise
                - Use only ASCII characters, avoid non-printable characters
        f. Chapter Six - Quality of Service Levels
            - Levels
                - 0 - at most once
                - 1 - at least once
                - 2 - exactly once
            - Two Sides of Message Delivery
                - Message delivery from publisher to broker - client that publishes defines the QoS level of the message when it sends the message
                - Message delivery from broker to subscriber - broker transmits message to subscribing clients using the QoS level that each subscriber defines during the subscription process
                - IMPORTANT - if subscribing client defines a lower QoS than the publishing, the broker transmits the message with the lower quality of service
            - Why is QoS Important? - opportunity to set a level that matches network reliability and application logic, makes communication in unreliable networks a lot easier
            - How does it work?
                - Level 0 - guarantees a best effort delivery and no guarantee of delivery i.e. fire and forget
                - Level 1 - guarantees that a message is delivered at least one time to the receiver, sender stores the message until it gets a PUBACK packet from the receiver (BROKER) that acknowledges receipt of the message
                - Level 2 - guarantees that each message is received only once by the intended receipients, safest and slowest quality of service level
            - QoS Good to Know - QoS can downgrade depending on difference between publisher QoS and subscirber QoS
            - Best Practice
                - Use QoS 0 when...
                    - You have a completely or mostly stable connection
                    - You don't mind a few messages lost i.e. data is sent at short intervals
                    - You don't need message queuing
                - Use QoS 1 when...
                    - You need to get every message and your use case can handle duplicates
                - Use QoS 2 when...
                    - It is critical to your application to receive all messages exactly once
        g. Chapter Seven - Persistent Session and Queueing Messages
            - Persistent Session - save all information that is relevant for the client on the broker, the client id that the client provides when it establishes connections to the broker identifies the session
            - What is stored in persistent session?
                - Existence of session
                - All the subscriptions of the client
                - ALl messages in a Quality of Service 1 or 2 flow that the client has not yet confirmed
                - All new QoS 1 or 2 messages that the client missed while offline
                - All QoS 2 messages receieved from the client that are not yet completely acknowledged
            - How do you start or end a persistent session?
                - cleanSession = false - broker creates a persistent session for the client
                - cleanSession = true - broker does not create a persistent session
            - Persistent Sessions on the Client Side - each MQTT client must also store a persistent session that includes all messages in a QoS 1 or 2 flow that are not yet confirmed by the broker and all QoS 2 messages received from the broker that are not yet completely acknowledged
            - Best Practices
                - Persistent Session
                    - client must get all messages from a certain topic, even if it is offline, you want the broker to queue the messages for the client and deliver them as soon as the client is back online
                    - client has limited resources, you want the broker to store the subscription information of the client and restore the interrupted communications quickly
                    - clietn needs to resume all QoS 1 and 2 publish messages after a reconnect
                - Clean Session
                    - client needs only to publish messages to topics, client does not need to subscribe to topics
                    - client does not need to get messages that it misses offline
                - How long does the broker store messages? The broker stores messages until the clients come back online and receives the message, if client does not come back online for a long time, the memory limit of the operating system is the primary constraint
        h. Chapter Eight - Retained Messages
            - Retained Messages - a normal MQTT message with the retained flag set to true, the broker stores the last retained message and the corresponding QoS for that topic
            - Retained Messages - help newly subscribed clients get a status update immediately after they subscribe to a topic, eliminates the wait for the publishing clients to send the next update i.e. last known good value
            - Send a Retained Message - just set the retained flag of an MQTT published message to true
            - Delete a Retained Message - send a retained message with a zero-byte payload on the topic where you want to delete the previous retained message
            - Why and When?
                - A retained message makes sense when you want newly connected subscribers to receive messages immediately
                    - Example - status of device1 is on the topic myhome/devices/device1/status - new subscribes get the status of the device immediately after they subscribe
                - Withouyt retained messages, new subscribes are kept in the dark between publish intervals
        i. Chapter Nine - Last Will and Testament
            - Disconnects
                - Ungracefully - due to loss of connection, empty bateries, or many other reasons
                - Graceful - with an MQTT DISCONNECT message
            - Last Will and Testament - notifies other clients about an ungracefully disconnected client
                - Last Will Message - normal MQTT message with a topic, retained message flag, QoS, and payload, if Broker sees ungraceful disconnect, the broker sends the last will message to all subscribed clients of the last will topic
            - How do you specifiy a LWT message for a client? - specify this in the CONNECT message when connecting to a broker from a client
            - When does a rboker send the LWT message?
                - Broker detects an I/O or network failure
                - Client fails to communicate within the defined Keep Alive period
                - Client does not sewnd a DISCONNECT packer before it closes the network connection
                - Brokers closes the network conection because of a protocol error
            - Best Practices - When should you use LWT? - great way to notify other subscribed clients about the unexpected loss of connection of another client
        j. Chapter Ten - Keep Alive and Client Take-Over
            - Problem of Half Open TCP Connection - TCP connections that are out of sync
            - MQTT Keep Alive - ensures that the connection between broker and client is still open, absence of any control packets, client MUST send a PINGREQ packet
            - Keep Alive Flow
                - MQTT PINGREQ Packet - sent by the client and indiactes to the broker that the client is still alive
                - MQTT PINGRESP Packer - broker replies to PINGREQ with PINGRESP to show the client that it is still available
            - Client Take-Over - if broker detects a half-open connection, it performs a client take over, the broker closes the previous connection and establishes a new connection
        k. Chapter Eleven - MQTT Over WebSockets
            - Enables
                - Displaying live infromation from a device or sensor
                - Receive push notifications e.g. an alert or critical condition warning
                - See the current status of devices with LWT and retained messages
                - Communicate efficiently with mobile web applications
            - Getting Started
                - Testing and Debugging - HiveMQ MQTT
                - Step by Step Guide on MQTT WebSockets Client
                - MQTT over WebSockets
    2. Volume 2 - MQTT 5 Essentials
        a. Chapter One - Introduction to MQTT 5
            - MQTT Design Goals
                - Add features that long term users want without increasing overhead or decreasing ease of use
                - Improve performance and scalability without adding unncessary complexity
                - Functional Objectives
                    - Enhancement for scalability and large scale systems
                    - Improved error reporting
                    - Formalize commoon patterns including capability discover and request response
                    - Extensibility mechanisms including user properties
                    - Performance improvements and support for small clients
        b. Chapter Two - Foundational Changes in the MQTT 5 Protocol
            - MQTT is still MQTT - Mostly
            - User Properties in the MQTT Header & Reason Codes - add custom key-value properties in the MQTT header
            - Reason Codes - indicates that a pre-defined protocol error occurred carried on CONNACK, PUBACK, PUBREC, PUBREL, PUBCOMP, SUBACK, UNSUBACK, AUTH, DISCONNECT
            - Clean Session is now Clean Start - broker discards any previous session data and the client starts with a fresh session, however, the session won't be cleaned automatically after the TCP connection is closed, to trigger deletion, use the Session Expiry Interval header field with a value of 0
            - Additional MQTT Packet - AUTH Packet - packet can be sent by brokers and clients after connection establishment to use complex challenge/response auth methods like SCRAM or Kerberos, and OAuth, also allows re-authentication without closing the connection
            - New Data Type - UTF-8 String Pairs
                - Total Data Types - Bit, Two Byte Integer, Four Byte Integer, UTF-8 Encoded String, Variable Byte Integer, Binary Data, UTF-8 String Pair
            - Bi- Directional DISCONNECT Packets - broker is now allowed to send a MQTT DISCONNECT packet prior to closing the socket
            - No Retry for QoS 1 and 2 Messages - brokers and clients are not allowed to retransmit MQTT messages for healthy TCP connections
            - Using Passwords without Usernames
        c. Chapter Three - Why You Should Upgrade to MQTT 5
            - Better Error Handling for More Robust Systems
                - Session and Message Expiry Feature - set a time lime for each message and session
                - Negative Acknowledgements - broker can send an acknowledgement to reject particular messages
            - More Scalability for Cloud Native Computing
                - Shared Subscriptions - allow multiple MQTT client instances to share the same subscription on the broker
                - Topic Aliases - substitute topic strings with an integer
            - Greater Flexibility and Easier Integration
                - User Properties - add a key-value property to the message header of an MQTT message
                - Payload Format Indicatores - make message processing easier
            - The Rise of a Single IoT Standard
            - HiveMQ and MQTT v5
        d. Chapter Four - Session and Message Expiry Intervals
            - Session Expiry Interval - interval defines the period of time that the broker stores the session information of that particular MQTT client
            - Message Expiry Interval - interval definesd the period of time that the broker stores the PUBLISH message for any matching susbscribers that are not currently connected
            - Why were the expiry intervals introduced? - automated house cleaning mechanism
            - Note - when the session for a client expires, all of the messages that are queued for the client expire with the session, regardles of the message expiry status
        e. Chapter Five - Improved Client Feedback and Negative ACKS
            - Feedback on Connection Establishment - broker can tell client which features are supported and/or allowed to be used
                - Features - retained messages, wildcard subscriptions, subscription identifiers, shared subscription, topic aliases, maximum quality of service level the client can use
                - Limits on - keep alive, session expiry interval, maximum packet size, maximum number of topic aliases the client can send
            - Better Reason Codes - more than 20 unsuccessful reason codes
            - New Reasong Strings - supplies context for a reason code i.e. a human readable string designed for diagnostics
            - Server-Setn Disconnect Packets - allows the server to send a DISCONNECT packet, containing a reason code and reason string, to the client before it closes the connection 
            - Negative Acknowledgements - UNSUBACK contains a reason code that informs the client about the success status of its UNSUBSCRIBE attempt with a number of possible reasons for failure
        f. Chapter Six - User Properties
            - User Properties - basic UTF-8 string key-value pairs that you can append to almost every type of MQTT packet excluding PINGREQ and PINGRES
            - Why were User Properties introduced? - lack of extensibility of the protocol and the difficult of creating multi-vendor deployments
            - Practical Use Case Examples
                - Saving resources with payload metadata - each message carries its own parsing information and reduces the computing load on the entire system
                - Increased efficiency through application level routing - dealing with systems with multiple inputs for the same published message in a topic
                - Transparent traceability in complex systems - allows publisher to easily add information about itself e.g. a clientID, publishing region, or system identifier
        g. Chapter Seven - Shared Subscriptions
            - Shared Subscriptions - allow MQTT clients to share the same subscription on the broker i.e. client load balancing, susbcription group can be imagined as a virtual client that acts as a proxy for multiple individual subscribers simultaneously
            - Shared Subscriptin Topic Syntax - $share/GROUPID/TOPIC
                - share$ - a static shared subscription identifier
                - GROUPID - a group identifier
                - TOPIC - the actual topic subscriptions
            - Shared Subscription Use Cases
                - Client load balancing for MQTT clients that are unable to handle the load on subscribed topics
                - Worker backend applications that ingest MQTT streams and need to scale horizontally
                - QoS 1 or 2 are used for delivery semantics but ordered-topc guarantees are not required
                - Hot topics with higher message rates than other topics in the system are causing a scalability bottleneck
            - How to subscribe with shared subscriptions? - subscribe to broker, on a topic, as a client, with a specific virtual group
            - Scaling MQTT Subscribers with Shared Subscriptions - gettijng work distribution in a pushing fashion
        h. Chapter Eight - Payload Format Description
            - Payload Format Indicator - part of any MQTT packet that contains a payload i.e. CONNECT with a WILL or PUBLISH, indicator is a optional byte value, 0 indicates an unspecified byte stream, 1 indicates a UTF-8 encoded payload
            - Content-Type - identifiers the kind of UTF-8 encoded payload
            - Why describe the Payload Format? - open possibility to create and define standards for MQTT with variable payload formats
        i. Chapter Nine - Request-Response Pattern
            - Response Topic
            - Correlation Data - optional binary data that follows the response topic, the sender of the requests uses the data for identifying to which specific request a response that is received later relates
            - Response Information - a client can request response information from the broker by setting a boolean field in CONNECT, when set to true, broker can send an optional UTF-8 string in the CONNACK to pass information about the response topics that are expected to be used
            - End-to-End Acknowlegement - request-reposen patterns enable end-to-end acknowledgements e.g. a smart door alert and knowing when the message was received and what was the result of the command
            - Best Practices and Gotchas
                - Requestor should always subscribe to the reponse topic before sending the request
                - Use unique identifiers in the response topic
                - Make sure that intended responsers have the necessary permissiosn to publish and subscribe to the response topics
                - Reserve a specific part of the topic tree for this purpose and use the response information field to pass it along to clients
        j. Chapter Ten - Topic Alias
            - Topic Aliases - interger value that can be used as a substitute for topic names
            - Restrictions - topic alias maximum, if maximum is 0, then no aliases are permitted
            - Use Case - when you want to send many small messages in real time with long topic names
        k. Chapter Eleven - Enhanced Authentication
            - Implementing Challenge-Response Authentication - MQTT 5 Enhanced Authentication provides the tools you need to implement authentication in a challenge-response manner
            - Key Authentication Message Properties
                - Authentication Method - identified by byte 21 - used to choose and describe a way of authentication that the client and server have agreed upon e.g. SCRAM-SHA or GS2-KRB
                - Authentication Data - identifier by byte 22 - binary information, used to transfer multiple iterations of encrypted secrets or protocol steps
            - Authentication Flow
                - MQTT Client sends CONNECT w/ Authentication Method and Authentication Data
                - MQTT Broker sends AUTH w/ Authentication Method and Authentication Data
                - MQTT Client responds with AUTH w/ Authentication Method and Authentication Data
                - MQTT Broker responds with CONNACK w/ Authentication Method and Authentication Data 
        l. Chapter Twelve - Flow Control
            - Flow Control - address the varying conditions among MQTT clients and brokers in a transparent manner, enables dynamic message flow adjustment for use cases that involve multiple non-identical systems and devices
            - How it Works - client and broker negotiate each other's in-flight windows during the connection establishment
                - Receive Maximum in CONNECT - tells the broker the maximum number of unacknowledged PUBLISH messages the client is able to receive
                - Receive Maximum in CONNACK - tells the client the maximum number of unacknowledged PUBLISH messages the broker is willing to receive